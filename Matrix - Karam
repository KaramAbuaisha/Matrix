from copy import deepcopy
class Matrix:
  def __init__(self, vals):
    self.vals = vals
    
  def ref(self):
    matrix = deepcopy(self.vals)
    length = len(matrix)
    if length > 1:
      
      #check if first entry is 0
      
      flag = False
      if matrix[0][0] != 0:
        flag = True
      else:
        for i in range(1, length):
          if matrix[i][0] != 0:
            temp = matrix[i]
            matrix[i] = matrix[0] 
            matrix[0] = temp
            flag = True
            break
        
      if flag == True:
        div = matrix[0][0]
        #printing div so you can determine the determinant
        print (div)
        for i in range(length):
          matrix[0][i] = matrix[0][i] / div
        #make every other row's first entry zero
        for i in range(1, length):
          if matrix[i][0] != 0:
            factor = matrix [i][0]
            for j in range(length):
              matrix[i][j] = matrix[i][j] - factor * matrix[0][j]
      #recursion 
      sub = Matrix([[matrix[j+1][i+1] for i in range(length-1)] for j in range(length-1)])
      
      minor = sub.ref()
      
      finalmatrix = [matrix[0]]
      if type(minor) == float:
        return [matrix[0], [0, minor]]
      for i in range(length-1):
        finalmatrix += [[0] + minor[i]]
      return finalmatrix
    else:
      print (matrix[0][0])
      return float(1)
  
  #ref without setting leading values to 1
  def ref1(self):
    matrix = deepcopy(self.vals)
    length = len(matrix)
    if length > 1:
      
      #check if first entry is 0
      counter = 1
      flag = False
      if matrix[0][0] != 0:
        flag = True
      else:
        for i in range(1, length):
          if flag == False and matrix[i][0] != 0:
            temp = matrix[i]
            matrix[i] = matrix[0] 
            matrix[0] = temp
            flag = True
            break
          else:
            counter += 1
      if flag == True:    
        for i in range(counter, length):
          if matrix[i][0] != 0:
            factor = matrix [i][0] / matrix [0][0]
            for j in range(length):
              matrix[i][j] = matrix[i][j] - factor * matrix[0][j]
              
      sub = Matrix([[matrix[j+1][i+1] for i in range(length-1)] for j in range(length-1)])
      
      minor = sub.ref1()
      
      finalmatrix = [matrix[0]]
      if type(minor) == float:
        return [matrix[0], [0, minor]]
      for i in range(length-1):
        finalmatrix += [[0] + minor[i]]
      return finalmatrix
    else:
      return (float(matrix[0][0]))
    
  def transpose(self):
    matrix = deepcopy(self.vals)
    counter = 0
    for i in range(len(matrix)):
      for j in range(1 + counter, len(matrix)):
        temp = matrix[i][j]
        matrix[i][j] = matrix[j][i]
        matrix[j][i] = temp
      counter += 1
    return matrix
    
  #very inefficient since after ref its technically already in rref (you have the rank)
  def rref(self):
    uppertriang = Matrix(self.vals).ref()
    print ("kk")
    lowertriang = Matrix(uppertriang).transpose()
    print ("k")
    finalmatrix = Matrix(lowertriang).ref()
    return finalmatrix
  
  def det(self):
    matrix = deepcopy(self.vals)
    uppertriang = Matrix(matrix).ref1()
    det = 1
    for i in range(len(matrix)):
      det = det * uppertriang[i][i]
    return det
  
  def independent(self):
    matrix = deepcopy(self.vals)
